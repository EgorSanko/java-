import java.util.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.nio.file.Paths;

public class lab1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("Выберите задание:");
            System.out.println("1. Вычислить функцию F");
            System.out.println("2. Перевести секунды в дни, часы, минуты и секунды");
            System.out.println("3. Определить стоимость переговоров");
            System.out.println("4. Определить знак Зодиака");
            System.out.println("5. Вычислить сумму ряда");
            System.out.println("6. Найти числа, квадрат которых является палиндромом");
            System.out.println("7. Вычислить сумму членов ряда с заданной точностью");
            System.out.println("8. Удалить дубликаты из массива");
            System.out.println("9. Объединить и упорядочить два случайных массива");
            System.out.println("10. Подсчитать количество использований символов в строке");
            System.out.println("11. Найти самый длинный палиндром в строке");
            System.out.println("12. Суммировать числа из файла");
            System.out.println("13. Выход");

            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    calculateAndPrintFunctionF(scanner);
                    break;
                case 2:
                    convertSecondsToTime(scanner);
                    break;
                case 3:
                    calculateCallCost(scanner);
                    break;
                case 4:
                    determineZodiacSign(scanner);
                    break;
                case 5:
                    calculateSeriesSum(scanner);
                    break;
                case 6:
                    findPalindromeSquares();
                    break;
                case 7:
                    calculateSeriesSumWithPrecision(scanner);
                    break;
                case 8:
                    showRandomAndUniqueArrays();
                    break;
                case 9:
                    mergeAndSortRandomArrays();
                    break;
                case 10:
                    countCharacterUsageInString(scanner);
                    break;
                case 11:
                    findLongestPalindromeInString(scanner);
                    break;
                case 12:
                    sumNumbersInFile();
                    break;
                case 13:
                    System.out.println("Выход из программы.");
                    break;
                default:
                    System.out.println("Недопустимый выбор");
            }
        } while (choice != 13);

        scanner.close();
    }

    public static void calculateAndPrintFunctionF(Scanner scanner) {
        System.out.print("Введите значение x: ");
        double x = scanner.nextDouble();

        System.out.print("Введите значение y: ");
        double y = scanner.nextDouble();

        double result = calculateF(x, y);

        System.out.println("Значение функции F: " + result);
    }

    public static double calculateF(double x, double y) {
        double part1 = Math.sqrt(Math.pow(2 + y, 2) + Math.pow(Math.sin(y + 5), 1.0 / 7));
        double part2 = Math.log(x + 1) - Math.pow(y, 3);
        double result = part1 / part2;
        return result;
    }

    public static void convertSecondsToTime(Scanner scanner) {
        System.out.print("Введите количество секунд: ");
        long seconds = scanner.nextLong();

        long days = seconds / (24 * 60 * 60);
        seconds %= (24 * 60 * 60);

        long hours = seconds / (60 * 60);
        seconds %= (60 * 60);

        long minutes = seconds / 60;
        seconds %= 60;

        System.out.println(seconds + " секунд - это " + days + " день, " + hours + " часов, " + minutes + " минут, " + seconds + " секунд");
    }

    public static void calculateCallCost(Scanner scanner) {
        System.out.print("Введите время начала разговора (от 0 до 23 часов): ");
        int t = scanner.nextInt();

        System.out.print("Введите продолжительность разговора (в минутах): ");
        int dt = scanner.nextInt();

        System.out.print("Введите стоимость минуты разговора: ");
        double s = scanner.nextDouble();

        System.out.print("Введите день недели (от 1 до 7, где 1 - понедельник, 7 - воскресенье): ");
        int d = scanner.nextInt();

        double cost = calculateCost(t, dt, s, d);

        System.out.println("Стоимость разговора: " + cost);
    }

    public static double calculateCost(int t, int dt, double s, int d) {
        boolean isNightTime = (t >= 22 || t < 8);
        boolean isWeekend = (d == 6 || d == 7); // Суббота (6) или воскресенье (7)
        double discount = 0.0;// переменная для хранения скидок ;

        // Применение скидки 20% в ночное время на будние дни
        if (isNightTime && !isWeekend) {
            discount = 0.2;
        }

        // Применение скидки 10% в выходные дни
        if (isWeekend) {
            discount += 0.1;
        }

        // Вычисление стоимости разговора
        double cost = dt * s * (1 - discount);

        return cost;
    }

    public static void determineZodiacSign(Scanner scanner) {
        System.out.print("Введите месяц рождения (число от 1 до 12): ");
        int month = scanner.nextInt();

        System.out.print("Введите день рождения: ");
        int day = scanner.nextInt();

        String zodiacSign = determineZodiacSign(month, day);

        System.out.println("Ваш знак Зодиака: " + zodiacSign);
    }

    public static String determineZodiacSign(int month, int day) {
        String[] zodiacSigns = {
                "Козерог", "Водолей", "Рыбы", "Овен", "Телец", "Близнецы",
                "Рак", "Лев", "Дева", "Весы", "Скорпион", "Стрелец"
        };

        int[] endDayOfMonth = {
                20, 18, 20, 20, 20, 21, 22, 22, 22, 22, 21, 21
        };

        if (day <= endDayOfMonth[month - 1]) {
            return zodiacSigns[month - 1];
        } else {
            // Переходим к следующему знаку Зодиака
            if (month < 12) {
                return zodiacSigns[month];
            } else {
                return zodiacSigns[0]; // Знак Зодиака - Козерог
            }
        }
    }

    public static void calculateSeriesSum(Scanner scanner) {
        System.out.print("Введите значение x: ");
        double x = scanner.nextDouble();

        System.out.print("Введите значение n: ");
        int n = scanner.nextInt();

        double sum = 0.0;

        for (int k = 3; k <= n; k++) {
            double numerator = Math.pow(-2, k - 1);
            double denominator = Math.pow(x, k - 5);

            // Проверяем, что знаменатель не равен нулю
            if (denominator != 0) {
                double term = numerator / denominator;

                // Вычисляем произведение
                double product = 1.0;
                for (int i = 1; i <= k + 7; i++) {
                    double factor = (Math.pow(i, 3) - 27) / (i - 7);

                    // Проверяем, что множитель не равен бесконечности
                    if (!Double.isInfinite(factor)) {
                        product *= factor;
                    }
                }

                // Добавляем слагаемое к сумме
                sum += term * product;
            }
        }

        System.out.println("Сумма ряда: " + sum);
    }
    public static void findPalindromeSquares() {
        long limit = 1000000000L; // Ограничение до 1 миллиарда
        long maxNum = (long) Math.sqrt(limit) + 1; // Максимальное число для проверки
        for (long num = 1; num < maxNum; num++) {
            long square = num * num;
            if (isPalindrome(square)) {
                System.out.println(num + " * " + num + " = " + square);
            }
        }
    }

    public static boolean isPalindrome(long number) {
        String strNumber = Long.toString(number);
        int length = strNumber.length();
        for (int i = 0; i < length / 2; i++) {
            if (strNumber.charAt(i) != strNumber.charAt(length - i - 1)) {
                return false;
            }
        }
        return true;
    }
    public static void calculateSeriesSumWithPrecision(Scanner scanner) {
        System.out.print("Введите значение x: ");
        double x = scanner.nextDouble();

        System.out.print("Введите точность ε: ");
        double epsilon = scanner.nextDouble();

        double sum = 0.0;
        double term = 1.0;
        int n = 0;

        while (Math.abs(term) >= epsilon) {
            sum += term;
            n++;

            term *= (2 * n + 1) * x * x / (2 * n * (2 * n + 1));
        }

        System.out.println("Сумма ряда с точностью ε = " + epsilon + ": " + sum);
    }
    public static void showRandomAndUniqueArrays() {
        // Создаем случайный массив
        int[] randomArray = generateRandomArray(10, 1, 10); // Пример: 10 элементов от 1 до 10

        System.out.println("Случайный массив: " + Arrays.toString(randomArray));

        List<Integer> uniqueList = new ArrayList<>();
        for (int element : randomArray) {
            if (!uniqueList.contains(element)) {
                uniqueList.add(element);
            }
        }

        // Преобразуем List обратно в массив
        int[] uniqueArray = new int[uniqueList.size()];
        for (int i = 0; i < uniqueList.size(); i++) {
            uniqueArray[i] = uniqueList.get(i);
        }

        System.out.println("Массив без дубликатов: " + Arrays.toString(uniqueArray));
    }

    public static void mergeAndSortRandomArrays() {
        int[] array1 = generateRandomArray(5, 1, 10); // Создаем случайный массив 1
        int[] array2 = generateRandomArray(6, 5, 15); // Создаем случайный массив 2

        int[] mergedArray = mergeAndSortArrays(array1, array2); // Объединяем и сортируем массивы

        System.out.println("Случайный массив 1: " + Arrays.toString(array1));
        System.out.println("Случайный массив 2: " + Arrays.toString(array2));
        System.out.println("Упорядоченный массив после слияния: " + Arrays.toString(mergedArray));
    }

    public static int[] generateRandomArray(int size, int min, int max) {
        int[] array = new int[size];
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(max - min + 1) + min;
        }
        return array;
    }

    public static int[] mergeAndSortArrays(int[] arr1, int[] arr2) {
        int[] mergedArray = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                mergedArray[k++] = arr1[i++];
            } else {
                mergedArray[k++] = arr2[j++];
            }
        }

        while (i < arr1.length) {
            mergedArray[k++] = arr1[i++];
        }

        while (j < arr2.length) {
            mergedArray[k++] = arr2[j++];
        }

        Arrays.sort(mergedArray); // Сортировка объединенного массива

        return mergedArray;
    }
    public static void countCharacterUsageInString(Scanner scanner) {
        System.out.print("Введите строку: ");
        String input = scanner.next();

        // Создаем карту для подсчета символов
        Map<Character, Integer> charCountMap = new HashMap<>();

        // Перебираем каждый символ в строке
        for (char c : input.toCharArray()) {
            // Если символ уже есть в карте, увеличиваем счетчик на 1
            if (charCountMap.containsKey(c)) {
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
                // Если символ встречается впервые, добавляем его в карту со счетчиком 1
                charCountMap.put(c, 1);
            }
        }

        // Выводим результаты на экран
        System.out.println("Результат подсчета символов:");
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            System.out.println("'" + entry.getKey() + "': " + entry.getValue() + " раз");
        }
    }
    public static void findLongestPalindromeInString(Scanner scanner) {
        System.out.print("Введите строку: ");
        scanner.nextLine(); // Считываем символ новой строки после выбора задания
        String input = scanner.nextLine();

        int longestStart = 0;
        int longestEnd = 0;

        for (int i = 0; i < input.length(); i++) {
            // Проверка на палиндром с центром в i
            int oddLength = expandAroundCenter(input, i, i);
            // Проверка на палиндром с центром между i и i+1
            int evenLength = expandAroundCenter(input, i, i + 1);

            // Найден палиндром большей длины
            int maxLength = Math.max(oddLength, evenLength);

            if (maxLength > longestEnd - longestStart) {
                longestStart = i - (maxLength - 1) / 2;
                longestEnd = i + maxLength / 2;
            }
        }

        if (longestStart >= 0 && longestEnd < input.length()) {
            System.out.println("Самый длинный палиндром: " + input.substring(longestStart, longestEnd + 1));
            System.out.println("Начальная позиция: " + longestStart);
            System.out.println("Конечная позиция: " + longestEnd);
        } else {
            System.out.println("Палиндром не найден.");
        }
    }

    private static int expandAroundCenter(String input, int left, int right) {
        while (left >= 0 && right < input.length() && input.charAt(left) == input.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
    public static void sumNumbersInFile() {
        try {
            Scanner scan = new Scanner(Paths.get("/лаб1.txt"));
            double sum = 0.0;

            while (scan.hasNext()) {
                if (scan.hasNextDouble()) {
                    double number = scan.nextDouble();
                    sum += number;
                } else {
                    scan.next(); // Пропустить нечисловой токен
                }
            }

            scan.close();

            System.out.println("Сумма чисел в файле: " + sum);
        } catch (Exception e) {
            System.out.println("Ошибка чтения файла: " + e.getMessage());
        }
    }
}


